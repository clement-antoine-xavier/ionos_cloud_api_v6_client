# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.connectable_datacenter import ConnectableDatacenter
from openapi_client.models.peer import Peer
from typing import Optional, Set
from typing_extensions import Self

class PrivateCrossConnectProperties(BaseModel):
    """
    PrivateCrossConnectProperties
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the Cross Connect.")
    description: Optional[StrictStr] = Field(default=None, description="Human-readable description of the Cross Connect.")
    peers: Optional[List[Peer]] = Field(default=None, description="Read-Only attribute. Lists LAN's connected to this Cross Connect.")
    connectable_datacenters: Optional[List[ConnectableDatacenter]] = Field(default=None, description="Read-Only attribute. Lists data centers that can be connected to this Cross Connect. If the Cross Connect is not connected to any LANs it lists all VDCs the user has access to. If the Cross Connect is connected to at least 1 LAN it lists all VDCs the user has access to in the location of the connected LAN.", alias="connectableDatacenters")
    __properties: ClassVar[List[str]] = ["name", "description", "peers", "connectableDatacenters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrivateCrossConnectProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "peers",
            "connectable_datacenters",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in peers (list)
        _items = []
        if self.peers:
            for _item_peers in self.peers:
                if _item_peers:
                    _items.append(_item_peers.to_dict())
            _dict['peers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in connectable_datacenters (list)
        _items = []
        if self.connectable_datacenters:
            for _item_connectable_datacenters in self.connectable_datacenters:
                if _item_connectable_datacenters:
                    _items.append(_item_connectable_datacenters.to_dict())
            _dict['connectableDatacenters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrivateCrossConnectProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "peers": [Peer.from_dict(_item) for _item in obj["peers"]] if obj.get("peers") is not None else None,
            "connectableDatacenters": [ConnectableDatacenter.from_dict(_item) for _item in obj["connectableDatacenters"]] if obj.get("connectableDatacenters") is not None else None
        })
        return _obj


