# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NetworkLoadBalancerForwardingRuleHealthCheck(BaseModel):
    """
    NetworkLoadBalancerForwardingRuleHealthCheck
    """ # noqa: E501
    client_timeout: Optional[StrictInt] = Field(default=None, description="The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).", alias="clientTimeout")
    connect_timeout: Optional[StrictInt] = Field(default=None, description="The maximum time in milliseconds to wait for a connection attempt to a target to succeed; default is 5000 (five seconds).", alias="connectTimeout")
    target_timeout: Optional[StrictInt] = Field(default=None, description="The maximum time in milliseconds that a target can remain inactive; default is 50,000 (50 seconds).", alias="targetTimeout")
    retries: Optional[StrictInt] = Field(default=None, description="The maximum number of attempts to reconnect to a target after a connection failure. Valid range is 0 to 65535 and default is three reconnection attempts.")
    __properties: ClassVar[List[str]] = ["clientTimeout", "connectTimeout", "targetTimeout", "retries"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkLoadBalancerForwardingRuleHealthCheck from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkLoadBalancerForwardingRuleHealthCheck from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientTimeout": obj.get("clientTimeout"),
            "connectTimeout": obj.get("connectTimeout"),
            "targetTimeout": obj.get("targetTimeout"),
            "retries": obj.get("retries")
        })
        return _obj


