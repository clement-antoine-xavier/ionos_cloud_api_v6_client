# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class KubernetesNodeMetadata(BaseModel):
    """
    KubernetesNodeMetadata
    """ # noqa: E501
    etag: Optional[StrictStr] = Field(default=None, description="The resource entity tag as defined in http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.11  Entity tags are also added as 'ETag' response headers to requests that do not use the 'depth' parameter.")
    created_date: Optional[datetime] = Field(default=None, description="The date the resource was created.", alias="createdDate")
    last_modified_date: Optional[datetime] = Field(default=None, description="The date the resource was last modified.", alias="lastModifiedDate")
    state: Optional[StrictStr] = Field(default=None, description="The resource state.")
    last_software_updated_date: Optional[datetime] = Field(default=None, description="The date when the software on the node was last updated.", alias="lastSoftwareUpdatedDate")
    __properties: ClassVar[List[str]] = ["etag", "createdDate", "lastModifiedDate", "state", "lastSoftwareUpdatedDate"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROVISIONING', 'PROVISIONED', 'READY', 'TERMINATING', 'REBUILDING', 'BUSY']):
            raise ValueError("must be one of enum values ('PROVISIONING', 'PROVISIONED', 'READY', 'TERMINATING', 'REBUILDING', 'BUSY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KubernetesNodeMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "etag",
            "created_date",
            "last_modified_date",
            "state",
            "last_software_updated_date",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KubernetesNodeMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "etag": obj.get("etag"),
            "createdDate": obj.get("createdDate"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "state": obj.get("state"),
            "lastSoftwareUpdatedDate": obj.get("lastSoftwareUpdatedDate")
        })
        return _obj


