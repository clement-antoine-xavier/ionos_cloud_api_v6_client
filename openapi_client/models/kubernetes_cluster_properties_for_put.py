# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.kubernetes_maintenance_window import KubernetesMaintenanceWindow
from openapi_client.models.s3_bucket import S3Bucket
from typing import Optional, Set
from typing_extensions import Self

class KubernetesClusterPropertiesForPut(BaseModel):
    """
    KubernetesClusterPropertiesForPut
    """ # noqa: E501
    name: StrictStr = Field(description="A Kubernetes cluster name. Valid Kubernetes cluster name must be 63 characters or less and must be empty or begin and end with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.")
    k8s_version: Optional[StrictStr] = Field(default=None, description="The Kubernetes version that the cluster is running. This limits which Kubernetes versions can run in a cluster's node pools. Also, not all Kubernetes versions are suitable upgrade targets for all earlier versions.", alias="k8sVersion")
    maintenance_window: Optional[KubernetesMaintenanceWindow] = Field(default=None, alias="maintenanceWindow")
    api_subnet_allow_list: Optional[List[StrictStr]] = Field(default=None, description="Access to the K8s API server is restricted to these CIDRs. Intra-cluster traffic is not affected by this restriction. If no AllowList is specified, access is not limited. If an IP is specified without a subnet mask, the default value is 32 for IPv4 and 128 for IPv6.", alias="apiSubnetAllowList")
    s3_buckets: Optional[List[S3Bucket]] = Field(default=None, description="List of Object storage buckets configured for K8s usage. At the moment, it contains only one bucket that is used to store K8s API audit logs.", alias="s3Buckets")
    __properties: ClassVar[List[str]] = ["name", "k8sVersion", "maintenanceWindow", "apiSubnetAllowList", "s3Buckets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KubernetesClusterPropertiesForPut from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of maintenance_window
        if self.maintenance_window:
            _dict['maintenanceWindow'] = self.maintenance_window.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in s3_buckets (list)
        _items = []
        if self.s3_buckets:
            for _item_s3_buckets in self.s3_buckets:
                if _item_s3_buckets:
                    _items.append(_item_s3_buckets.to_dict())
            _dict['s3Buckets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KubernetesClusterPropertiesForPut from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "k8sVersion": obj.get("k8sVersion"),
            "maintenanceWindow": KubernetesMaintenanceWindow.from_dict(obj["maintenanceWindow"]) if obj.get("maintenanceWindow") is not None else None,
            "apiSubnetAllowList": obj.get("apiSubnetAllowList"),
            "s3Buckets": [S3Bucket.from_dict(_item) for _item in obj["s3Buckets"]] if obj.get("s3Buckets") is not None else None
        })
        return _obj


