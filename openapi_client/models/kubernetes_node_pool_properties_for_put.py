# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.kubernetes_auto_scaling import KubernetesAutoScaling
from openapi_client.models.kubernetes_maintenance_window import KubernetesMaintenanceWindow
from openapi_client.models.kubernetes_node_pool_lan import KubernetesNodePoolLan
from openapi_client.models.kubernetes_node_pool_server_type import KubernetesNodePoolServerType
from typing import Optional, Set
from typing_extensions import Self

class KubernetesNodePoolPropertiesForPut(BaseModel):
    """
    KubernetesNodePoolPropertiesForPut
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="A Kubernetes node pool name. Valid Kubernetes node pool name must be 63 characters or less and must be empty or begin and end with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.")
    node_count: StrictInt = Field(description="The number of worker nodes of the node pool.", alias="nodeCount")
    server_type: Optional[KubernetesNodePoolServerType] = Field(default=KubernetesNodePoolServerType.DEDICATEDCORE, alias="serverType")
    k8s_version: Optional[StrictStr] = Field(default=None, description="The Kubernetes version running in the node pool. Note that this imposes restrictions on which Kubernetes versions can run in the node pools of a cluster. Also, not all Kubernetes versions are suitable upgrade targets for all earlier versions.", alias="k8sVersion")
    maintenance_window: Optional[KubernetesMaintenanceWindow] = Field(default=None, alias="maintenanceWindow")
    auto_scaling: Optional[KubernetesAutoScaling] = Field(default=None, alias="autoScaling")
    lans: Optional[List[KubernetesNodePoolLan]] = Field(default=None, description="The array of existing private LANs to attach to worker nodes.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels attached to the node pool.")
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="The annotations attached to the node pool.")
    public_ips: Optional[List[StrictStr]] = Field(default=None, description="Optional array of reserved public IP addresses to be used by the nodes. The IPs must be from the exact location of the node pool's data center. If autoscaling is used, the array must contain one more IP than the maximum possible number of nodes (nodeCount+1 for a fixed number of nodes or maxNodeCount+1). The extra IP is used when the nodes are rebuilt.", alias="publicIps")
    __properties: ClassVar[List[str]] = ["name", "nodeCount", "serverType", "k8sVersion", "maintenanceWindow", "autoScaling", "lans", "labels", "annotations", "publicIps"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KubernetesNodePoolPropertiesForPut from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of maintenance_window
        if self.maintenance_window:
            _dict['maintenanceWindow'] = self.maintenance_window.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auto_scaling
        if self.auto_scaling:
            _dict['autoScaling'] = self.auto_scaling.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in lans (list)
        _items = []
        if self.lans:
            for _item_lans in self.lans:
                if _item_lans:
                    _items.append(_item_lans.to_dict())
            _dict['lans'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KubernetesNodePoolPropertiesForPut from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "nodeCount": obj.get("nodeCount"),
            "serverType": obj.get("serverType") if obj.get("serverType") is not None else KubernetesNodePoolServerType.DEDICATEDCORE,
            "k8sVersion": obj.get("k8sVersion"),
            "maintenanceWindow": KubernetesMaintenanceWindow.from_dict(obj["maintenanceWindow"]) if obj.get("maintenanceWindow") is not None else None,
            "autoScaling": KubernetesAutoScaling.from_dict(obj["autoScaling"]) if obj.get("autoScaling") is not None else None,
            "lans": [KubernetesNodePoolLan.from_dict(_item) for _item in obj["lans"]] if obj.get("lans") is not None else None,
            "labels": obj.get("labels"),
            "annotations": obj.get("annotations"),
            "publicIps": obj.get("publicIps")
        })
        return _obj


