# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.nat_gateway_rule_protocol import NatGatewayRuleProtocol
from openapi_client.models.nat_gateway_rule_type import NatGatewayRuleType
from openapi_client.models.target_port_range import TargetPortRange
from typing import Optional, Set
from typing_extensions import Self

class NatGatewayRuleProperties(BaseModel):
    """
    NatGatewayRuleProperties
    """ # noqa: E501
    name: StrictStr = Field(description="The name of the NAT Gateway rule.")
    type: Optional[NatGatewayRuleType] = Field(default=None, description="Type of the NAT Gateway rule.")
    protocol: Optional[NatGatewayRuleProtocol] = Field(default=None, description="Protocol of the NAT Gateway rule. Defaults to ALL. If protocol is 'ICMP' then targetPortRange start and end cannot be set.")
    source_subnet: StrictStr = Field(description="Source subnet of the NAT Gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets source IP address.", alias="sourceSubnet")
    public_ip: StrictStr = Field(description="Public IP address of the NAT Gateway rule. Specifies the address used for masking outgoing packets source address field. Should be one of the customer reserved IP address already configured on the NAT Gateway resource", alias="publicIp")
    target_subnet: Optional[StrictStr] = Field(default=None, description="Target or destination subnet of the NAT Gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets destination IP address. If none is provided, rule will match any address.", alias="targetSubnet")
    target_port_range: Optional[TargetPortRange] = Field(default=None, alias="targetPortRange")
    __properties: ClassVar[List[str]] = ["name", "type", "protocol", "sourceSubnet", "publicIp", "targetSubnet", "targetPortRange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NatGatewayRuleProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of target_port_range
        if self.target_port_range:
            _dict['targetPortRange'] = self.target_port_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NatGatewayRuleProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "type": obj.get("type"),
            "protocol": obj.get("protocol"),
            "sourceSubnet": obj.get("sourceSubnet"),
            "publicIp": obj.get("publicIp"),
            "targetSubnet": obj.get("targetSubnet"),
            "targetPortRange": TargetPortRange.from_dict(obj["targetPortRange"]) if obj.get("targetPortRange") is not None else None
        })
        return _obj


