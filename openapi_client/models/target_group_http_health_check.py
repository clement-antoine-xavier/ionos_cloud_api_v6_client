# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TargetGroupHttpHealthCheck(BaseModel):
    """
    TargetGroupHttpHealthCheck
    """ # noqa: E501
    path: Optional[StrictStr] = Field(default=None, description="The destination URL for HTTP the health check; the default is '/'.")
    method: Optional[StrictStr] = Field(default=None, description="The method used for the health check request.")
    match_type: StrictStr = Field(description="Specify the target's response type to match ALB's request.", alias="matchType")
    response: StrictStr = Field(description="The response returned by the request. It can be a status code or a response body depending on the definition of 'matchType'.")
    regex: Optional[StrictBool] = Field(default=None, description="Specifies whether to use a regular expression to parse the response body; the default value is 'FALSE'.  By using regular expressions, you can flexibly customize the expected response from a healthy server.")
    negate: Optional[StrictBool] = Field(default=None, description="Specifies whether to negate an individual entry; the default value is 'FALSE'.")
    __properties: ClassVar[List[str]] = ["path", "method", "matchType", "response", "regex", "negate"]

    @field_validator('method')
    def method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HEAD', 'PUT', 'POST', 'GET', 'TRACE', 'PATCH']):
            raise ValueError("must be one of enum values ('HEAD', 'PUT', 'POST', 'GET', 'TRACE', 'PATCH')")
        return value

    @field_validator('match_type')
    def match_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['STATUS_CODE', 'RESPONSE_BODY']):
            raise ValueError("must be one of enum values ('STATUS_CODE', 'RESPONSE_BODY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TargetGroupHttpHealthCheck from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TargetGroupHttpHealthCheck from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "path": obj.get("path"),
            "method": obj.get("method"),
            "matchType": obj.get("matchType"),
            "response": obj.get("response"),
            "regex": obj.get("regex"),
            "negate": obj.get("negate")
        })
        return _obj


