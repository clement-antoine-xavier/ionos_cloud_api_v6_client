# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class FirewallruleProperties(BaseModel):
    """
    FirewallruleProperties
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the  resource.")
    protocol: StrictStr = Field(description="The protocol for the rule. Property cannot be modified after it is created (disallowed in update requests).")
    source_mac: Optional[StrictStr] = Field(default=None, description="Only traffic originating from the respective MAC address is allowed. Valid format: aa:bb:cc:dd:ee:ff. Value null allows traffic from any MAC address.", alias="sourceMac")
    ip_version: Optional[StrictStr] = Field(default=None, description="The IP version for this rule. If sourceIp or targetIp are specified, you can omit this value - the IP version will then be deduced from the IP address(es) used; if you specify it anyway, it must match the specified IP address(es). If neither sourceIp nor targetIp are specified, this rule allows traffic only for the specified IP version. If neither sourceIp, targetIp nor ipVersion are specified, this rule will only allow IPv4 traffic.", alias="ipVersion")
    source_ip: Optional[StrictStr] = Field(default=None, description="Only traffic originating from the respective IP address (or CIDR block) is allowed. Value null allows traffic from any IP address (according to the selected ipVersion).", alias="sourceIp")
    target_ip: Optional[StrictStr] = Field(default=None, description="If the target NIC has multiple IP addresses, only the traffic directed to the respective IP address (or CIDR block) of the NIC is allowed. Value null allows traffic to any target IP address (according to the selected ipVersion).", alias="targetIp")
    icmp_code: Optional[Annotated[int, Field(le=254, strict=True, ge=0)]] = Field(default=None, description="Defines the allowed code (from 0 to 254) if protocol ICMP or ICMPv6 is chosen. Value null allows all codes.", alias="icmpCode")
    icmp_type: Optional[Annotated[int, Field(le=254, strict=True, ge=0)]] = Field(default=None, description="Defines the allowed type (from 0 to 254) if the protocol ICMP or ICMPv6 is chosen. Value null allows all types.", alias="icmpType")
    port_range_start: Optional[Annotated[int, Field(le=65535, strict=True, ge=1)]] = Field(default=None, description="Defines the start range of the allowed port (from 1 to 65535) if protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd value null to allow all ports.", alias="portRangeStart")
    port_range_end: Optional[Annotated[int, Field(le=65535, strict=True, ge=1)]] = Field(default=None, description="Defines the end range of the allowed port (from 1 to 65535) if the protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd null to allow all ports.", alias="portRangeEnd")
    type: Optional[StrictStr] = Field(default=None, description="The type of the firewall rule. If not specified, the default INGRESS value is used.")
    __properties: ClassVar[List[str]] = ["name", "protocol", "sourceMac", "ipVersion", "sourceIp", "targetIp", "icmpCode", "icmpType", "portRangeStart", "portRangeEnd", "type"]

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['TCP', 'UDP', 'ICMP', 'ICMPv6', 'GRE', 'VRRP', 'ESP', 'AH', 'ANY']):
            raise ValueError("must be one of enum values ('TCP', 'UDP', 'ICMP', 'ICMPv6', 'GRE', 'VRRP', 'ESP', 'AH', 'ANY')")
        return value

    @field_validator('ip_version')
    def ip_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IPv4', 'IPv6']):
            raise ValueError("must be one of enum values ('IPv4', 'IPv6')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INGRESS', 'EGRESS']):
            raise ValueError("must be one of enum values ('INGRESS', 'EGRESS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FirewallruleProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if source_mac (nullable) is None
        # and model_fields_set contains the field
        if self.source_mac is None and "source_mac" in self.model_fields_set:
            _dict['sourceMac'] = None

        # set to None if ip_version (nullable) is None
        # and model_fields_set contains the field
        if self.ip_version is None and "ip_version" in self.model_fields_set:
            _dict['ipVersion'] = None

        # set to None if source_ip (nullable) is None
        # and model_fields_set contains the field
        if self.source_ip is None and "source_ip" in self.model_fields_set:
            _dict['sourceIp'] = None

        # set to None if target_ip (nullable) is None
        # and model_fields_set contains the field
        if self.target_ip is None and "target_ip" in self.model_fields_set:
            _dict['targetIp'] = None

        # set to None if icmp_code (nullable) is None
        # and model_fields_set contains the field
        if self.icmp_code is None and "icmp_code" in self.model_fields_set:
            _dict['icmpCode'] = None

        # set to None if icmp_type (nullable) is None
        # and model_fields_set contains the field
        if self.icmp_type is None and "icmp_type" in self.model_fields_set:
            _dict['icmpType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FirewallruleProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "protocol": obj.get("protocol"),
            "sourceMac": obj.get("sourceMac"),
            "ipVersion": obj.get("ipVersion"),
            "sourceIp": obj.get("sourceIp"),
            "targetIp": obj.get("targetIp"),
            "icmpCode": obj.get("icmpCode"),
            "icmpType": obj.get("icmpType"),
            "portRangeStart": obj.get("portRangeStart"),
            "portRangeEnd": obj.get("portRangeEnd"),
            "type": obj.get("type")
        })
        return _obj


