# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ResourceLimits(BaseModel):
    """
    ResourceLimits
    """ # noqa: E501
    cores_per_server: StrictInt = Field(description="The maximum number of CPU cores per server.", alias="coresPerServer")
    cores_per_contract: StrictInt = Field(description="The maximum number of CPU cores per contract.", alias="coresPerContract")
    cores_provisioned: StrictInt = Field(description="The number of CPU cores provisioned.", alias="coresProvisioned")
    ram_per_server: StrictInt = Field(description="The maximum amount of RAM (in MB) that can be provisioned for a particular server under this contract.", alias="ramPerServer")
    ram_per_contract: StrictInt = Field(description="The maximum amount of RAM (in MB) that can be provisioned under this contract.", alias="ramPerContract")
    ram_provisioned: StrictInt = Field(description="The amount of RAM (in MB) provisioned under this contract.", alias="ramProvisioned")
    hdd_limit_per_volume: StrictInt = Field(description="The maximum size (in MB) of an idividual hard disk volume.", alias="hddLimitPerVolume")
    hdd_limit_per_contract: StrictInt = Field(description="The maximum amount of disk space (in MB) that can be provided under this contract.", alias="hddLimitPerContract")
    hdd_volume_provisioned: StrictInt = Field(description="The amount of hard disk space (in MB) that is currently provisioned.", alias="hddVolumeProvisioned")
    ssd_limit_per_volume: StrictInt = Field(description="The maximum size (in MB) of an individual solid state disk volume.", alias="ssdLimitPerVolume")
    ssd_limit_per_contract: StrictInt = Field(description="The maximum amount of solid state disk space (in MB) that can be provisioned under this contract.", alias="ssdLimitPerContract")
    ssd_volume_provisioned: StrictInt = Field(description="The amount of solid state disk space (in MB) that is currently provisioned.", alias="ssdVolumeProvisioned")
    das_volume_provisioned: StrictInt = Field(description="The amount of DAS disk space (in MB) in a Cube server that is currently provisioned.", alias="dasVolumeProvisioned")
    reservable_ips: StrictInt = Field(description="The maximum number of static public IP addresses that can be reserved by this customer across contracts.", alias="reservableIps")
    reserved_ips_on_contract: StrictInt = Field(description="The maximum number of static public IP addresses that can be reserved for this contract.", alias="reservedIpsOnContract")
    reserved_ips_in_use: StrictInt = Field(description="The number of static public IP addresses in use.", alias="reservedIpsInUse")
    k8s_cluster_limit_total: StrictInt = Field(description="The maximum number of Kubernetes clusters that can be created under this contract.", alias="k8sClusterLimitTotal")
    k8s_clusters_provisioned: StrictInt = Field(description="The amount of Kubernetes clusters that is currently provisioned.", alias="k8sClustersProvisioned")
    nlb_limit_total: StrictInt = Field(description="The NLB total limit.", alias="nlbLimitTotal")
    nlb_provisioned: StrictInt = Field(description="The NLBs provisioned.", alias="nlbProvisioned")
    nat_gateway_limit_total: StrictInt = Field(description="The NAT Gateway total limit.", alias="natGatewayLimitTotal")
    nat_gateway_provisioned: StrictInt = Field(description="The NAT Gateways provisioned.", alias="natGatewayProvisioned")
    security_groups_per_vdc: StrictInt = Field(description="The maximum number of security groups per VDC.", alias="securityGroupsPerVdc")
    security_groups_per_resource: StrictInt = Field(description="The maximum number of security groups that can be attached to a NIC or a VM individually. For example, a user can have maximum 10 security groups per NIC and 10 per VM.", alias="securityGroupsPerResource")
    rules_per_security_group: StrictInt = Field(description="The maximum number of rules per security group.", alias="rulesPerSecurityGroup")
    __properties: ClassVar[List[str]] = ["coresPerServer", "coresPerContract", "coresProvisioned", "ramPerServer", "ramPerContract", "ramProvisioned", "hddLimitPerVolume", "hddLimitPerContract", "hddVolumeProvisioned", "ssdLimitPerVolume", "ssdLimitPerContract", "ssdVolumeProvisioned", "dasVolumeProvisioned", "reservableIps", "reservedIpsOnContract", "reservedIpsInUse", "k8sClusterLimitTotal", "k8sClustersProvisioned", "nlbLimitTotal", "nlbProvisioned", "natGatewayLimitTotal", "natGatewayProvisioned", "securityGroupsPerVdc", "securityGroupsPerResource", "rulesPerSecurityGroup"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceLimits from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceLimits from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coresPerServer": obj.get("coresPerServer"),
            "coresPerContract": obj.get("coresPerContract"),
            "coresProvisioned": obj.get("coresProvisioned"),
            "ramPerServer": obj.get("ramPerServer"),
            "ramPerContract": obj.get("ramPerContract"),
            "ramProvisioned": obj.get("ramProvisioned"),
            "hddLimitPerVolume": obj.get("hddLimitPerVolume"),
            "hddLimitPerContract": obj.get("hddLimitPerContract"),
            "hddVolumeProvisioned": obj.get("hddVolumeProvisioned"),
            "ssdLimitPerVolume": obj.get("ssdLimitPerVolume"),
            "ssdLimitPerContract": obj.get("ssdLimitPerContract"),
            "ssdVolumeProvisioned": obj.get("ssdVolumeProvisioned"),
            "dasVolumeProvisioned": obj.get("dasVolumeProvisioned"),
            "reservableIps": obj.get("reservableIps"),
            "reservedIpsOnContract": obj.get("reservedIpsOnContract"),
            "reservedIpsInUse": obj.get("reservedIpsInUse"),
            "k8sClusterLimitTotal": obj.get("k8sClusterLimitTotal"),
            "k8sClustersProvisioned": obj.get("k8sClustersProvisioned"),
            "nlbLimitTotal": obj.get("nlbLimitTotal"),
            "nlbProvisioned": obj.get("nlbProvisioned"),
            "natGatewayLimitTotal": obj.get("natGatewayLimitTotal"),
            "natGatewayProvisioned": obj.get("natGatewayProvisioned"),
            "securityGroupsPerVdc": obj.get("securityGroupsPerVdc"),
            "securityGroupsPerResource": obj.get("securityGroupsPerResource"),
            "rulesPerSecurityGroup": obj.get("rulesPerSecurityGroup")
        })
        return _obj


