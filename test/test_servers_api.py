# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ionos_cloud_api_v6_client.servers_api import ServersApi


class TestServersApi(unittest.TestCase):
    """ServersApi unit test stubs"""

    def setUp(self) -> None:
        self.api = ServersApi()

    def tearDown(self) -> None:
        pass

    def test_datacenters_servers_cdroms_delete(self) -> None:
        """Test case for datacenters_servers_cdroms_delete

        Detach a CD-ROM by ID
        """
        pass

    def test_datacenters_servers_cdroms_find_by_id(self) -> None:
        """Test case for datacenters_servers_cdroms_find_by_id

        Get Attached CD-ROM by ID
        """
        pass

    def test_datacenters_servers_cdroms_get(self) -> None:
        """Test case for datacenters_servers_cdroms_get

        Get Attached CD-ROMs 
        """
        pass

    def test_datacenters_servers_cdroms_post(self) -> None:
        """Test case for datacenters_servers_cdroms_post

        Attach a CD-ROM
        """
        pass

    def test_datacenters_servers_delete(self) -> None:
        """Test case for datacenters_servers_delete

        Delete servers
        """
        pass

    def test_datacenters_servers_find_by_id(self) -> None:
        """Test case for datacenters_servers_find_by_id

        Retrieve servers by ID
        """
        pass

    def test_datacenters_servers_get(self) -> None:
        """Test case for datacenters_servers_get

        List servers 
        """
        pass

    def test_datacenters_servers_patch(self) -> None:
        """Test case for datacenters_servers_patch

        Partially modify servers
        """
        pass

    def test_datacenters_servers_post(self) -> None:
        """Test case for datacenters_servers_post

        Create a Server
        """
        pass

    def test_datacenters_servers_put(self) -> None:
        """Test case for datacenters_servers_put

        Modify a Server by ID
        """
        pass

    def test_datacenters_servers_reboot_post(self) -> None:
        """Test case for datacenters_servers_reboot_post

        Reboot servers
        """
        pass

    def test_datacenters_servers_remote_console_get(self) -> None:
        """Test case for datacenters_servers_remote_console_get

        Get Remote Console link
        """
        pass

    def test_datacenters_servers_resume_post(self) -> None:
        """Test case for datacenters_servers_resume_post

        Resume a Cube Server by ID
        """
        pass

    def test_datacenters_servers_start_post(self) -> None:
        """Test case for datacenters_servers_start_post

        Start an Enterprise Server by ID
        """
        pass

    def test_datacenters_servers_stop_post(self) -> None:
        """Test case for datacenters_servers_stop_post

        Stop an Enterprise Server by ID
        """
        pass

    def test_datacenters_servers_suspend_post(self) -> None:
        """Test case for datacenters_servers_suspend_post

        Suspend a Cube Server by ID
        """
        pass

    def test_datacenters_servers_token_get(self) -> None:
        """Test case for datacenters_servers_token_get

        Get JSON Web Token
        """
        pass

    def test_datacenters_servers_upgrade_post(self) -> None:
        """Test case for datacenters_servers_upgrade_post

        Upgrade a Server by ID
        """
        pass

    def test_datacenters_servers_volumes_delete(self) -> None:
        """Test case for datacenters_servers_volumes_delete

        Detach a Volume by ID
        """
        pass

    def test_datacenters_servers_volumes_find_by_id(self) -> None:
        """Test case for datacenters_servers_volumes_find_by_id

        Get Attached Volume by ID
        """
        pass

    def test_datacenters_servers_volumes_get(self) -> None:
        """Test case for datacenters_servers_volumes_get

        Get Attached Volumes
        """
        pass

    def test_datacenters_servers_volumes_post(self) -> None:
        """Test case for datacenters_servers_volumes_post

        Attach a Volume to a Server
        """
        pass


if __name__ == '__main__':
    unittest.main()
