# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ionos_cloud_api_v6_client.models.network_load_balancer_forwarding_rule_properties import NetworkLoadBalancerForwardingRuleProperties

class TestNetworkLoadBalancerForwardingRuleProperties(unittest.TestCase):
    """NetworkLoadBalancerForwardingRuleProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NetworkLoadBalancerForwardingRuleProperties:
        """Test NetworkLoadBalancerForwardingRuleProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NetworkLoadBalancerForwardingRuleProperties`
        """
        model = NetworkLoadBalancerForwardingRuleProperties()
        if include_optional:
            return NetworkLoadBalancerForwardingRuleProperties(
                name = 'My Network Load Balancer forwarding rule',
                algorithm = 'ROUND_ROBIN',
                protocol = 'HTTP',
                listener_ip = '81.173.1.2',
                listener_port = 8080,
                health_check = ionos_cloud_api_v6_client.models.network_load_balancer_forwarding_rule_health_check.NetworkLoadBalancerForwardingRuleHealthCheck(
                    client_timeout = 50, 
                    connect_timeout = 5000, 
                    target_timeout = 50000, 
                    retries = 3, ),
                targets = [
                    ionos_cloud_api_v6_client.models.network_load_balancer_forwarding_rule_target.NetworkLoadBalancerForwardingRuleTarget(
                        ip = '22.231.2.2', 
                        port = 8080, 
                        weight = 123, 
                        proxy_protocol = 'none', 
                        health_check = ionos_cloud_api_v6_client.models.network_load_balancer_forwarding_rule_target_health_check.NetworkLoadBalancerForwardingRuleTargetHealthCheck(
                            check = True, 
                            check_interval = 2000, 
                            maintenance = True, ), )
                    ]
            )
        else:
            return NetworkLoadBalancerForwardingRuleProperties(
                name = 'My Network Load Balancer forwarding rule',
                algorithm = 'ROUND_ROBIN',
                protocol = 'HTTP',
                listener_ip = '81.173.1.2',
                listener_port = 8080,
                targets = [
                    ionos_cloud_api_v6_client.models.network_load_balancer_forwarding_rule_target.NetworkLoadBalancerForwardingRuleTarget(
                        ip = '22.231.2.2', 
                        port = 8080, 
                        weight = 123, 
                        proxy_protocol = 'none', 
                        health_check = ionos_cloud_api_v6_client.models.network_load_balancer_forwarding_rule_target_health_check.NetworkLoadBalancerForwardingRuleTargetHealthCheck(
                            check = True, 
                            check_interval = 2000, 
                            maintenance = True, ), )
                    ],
        )
        """

    def testNetworkLoadBalancerForwardingRuleProperties(self):
        """Test NetworkLoadBalancerForwardingRuleProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
