# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ionos_cloud_api_v6_client.models.target_group_put import TargetGroupPut

class TestTargetGroupPut(unittest.TestCase):
    """TargetGroupPut unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TargetGroupPut:
        """Test TargetGroupPut
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TargetGroupPut`
        """
        model = TargetGroupPut()
        if include_optional:
            return TargetGroupPut(
                id = '15f67991-0f51-4efc-a8ad-ef1fb31a480c',
                type = 'datacenter',
                href = '<RESOURCE-URI>',
                properties = ionos_cloud_api_v6_client.models.target_group_properties.TargetGroupProperties(
                    name = 'My target group', 
                    algorithm = 'ROUND_ROBIN', 
                    protocol = 'HTTP', 
                    protocol_version = 'HTTP1', 
                    targets = [
                        ionos_cloud_api_v6_client.models.target_group_target.TargetGroupTarget(
                            ip = '22.231.2.2', 
                            port = 8080, 
                            weight = 123, 
                            proxy_protocol = 'none', 
                            health_check_enabled = True, 
                            maintenance_enabled = True, )
                        ], 
                    health_check = ionos_cloud_api_v6_client.models.target_group_health_check.TargetGroupHealthCheck(
                        check_timeout = 2000, 
                        check_interval = 2000, 
                        retries = 3, ), 
                    http_health_check = ionos_cloud_api_v6_client.models.target_group_http_health_check.TargetGroupHttpHealthCheck(
                        path = '/monitoring', 
                        method = 'GET', 
                        match_type = 'STATUS_CODE', 
                        response = '200', 
                        regex = False, 
                        negate = False, ), )
            )
        else:
            return TargetGroupPut(
                properties = ionos_cloud_api_v6_client.models.target_group_properties.TargetGroupProperties(
                    name = 'My target group', 
                    algorithm = 'ROUND_ROBIN', 
                    protocol = 'HTTP', 
                    protocol_version = 'HTTP1', 
                    targets = [
                        ionos_cloud_api_v6_client.models.target_group_target.TargetGroupTarget(
                            ip = '22.231.2.2', 
                            port = 8080, 
                            weight = 123, 
                            proxy_protocol = 'none', 
                            health_check_enabled = True, 
                            maintenance_enabled = True, )
                        ], 
                    health_check = ionos_cloud_api_v6_client.models.target_group_health_check.TargetGroupHealthCheck(
                        check_timeout = 2000, 
                        check_interval = 2000, 
                        retries = 3, ), 
                    http_health_check = ionos_cloud_api_v6_client.models.target_group_http_health_check.TargetGroupHttpHealthCheck(
                        path = '/monitoring', 
                        method = 'GET', 
                        match_type = 'STATUS_CODE', 
                        response = '200', 
                        regex = False, 
                        negate = False, ), ),
        )
        """

    def testTargetGroupPut(self):
        """Test TargetGroupPut"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
