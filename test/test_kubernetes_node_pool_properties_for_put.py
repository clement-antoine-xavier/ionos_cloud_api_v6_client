# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.kubernetes_node_pool_properties_for_put import KubernetesNodePoolPropertiesForPut

class TestKubernetesNodePoolPropertiesForPut(unittest.TestCase):
    """KubernetesNodePoolPropertiesForPut unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> KubernetesNodePoolPropertiesForPut:
        """Test KubernetesNodePoolPropertiesForPut
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `KubernetesNodePoolPropertiesForPut`
        """
        model = KubernetesNodePoolPropertiesForPut()
        if include_optional:
            return KubernetesNodePoolPropertiesForPut(
                name = 'k8s-node-pool',
                node_count = 2,
                server_type = 'DedicatedCore',
                k8s_version = '1.15.4',
                maintenance_window = openapi_client.models.kubernetes_maintenance_window.KubernetesMaintenanceWindow(
                    day_of_the_week = 'Monday', 
                    time = '13:00:00', ),
                auto_scaling = openapi_client.models.kubernetes_auto_scaling.KubernetesAutoScaling(
                    min_node_count = 1, 
                    max_node_count = 3, ),
                lans = [
                    openapi_client.models.kubernetes_node_pool_lan.KubernetesNodePoolLan(
                        datacenter_id = '00000000-0000-0000-0000-000000000000', 
                        id = 3, 
                        dhcp = True, 
                        routes = [
                            openapi_client.models.kubernetes_node_pool_lan_routes.KubernetesNodePoolLanRoutes(
                                network = '1.2.3.4/24', 
                                gateway_ip = '10.1.5.16', )
                            ], )
                    ],
                labels = {
                    'key' : ''
                    },
                annotations = {
                    'key' : ''
                    },
                public_ips = ["81.173.1.2","82.231.2.5","92.221.2.4"]
            )
        else:
            return KubernetesNodePoolPropertiesForPut(
                node_count = 2,
        )
        """

    def testKubernetesNodePoolPropertiesForPut(self):
        """Test KubernetesNodePoolPropertiesForPut"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
