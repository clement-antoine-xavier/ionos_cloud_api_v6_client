# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TargetGroupTarget(BaseModel):
    """
    TargetGroupTarget
    """ # noqa: E501
    ip: StrictStr = Field(description="The IP address of the balanced target.")
    port: StrictInt = Field(description="The port of the balanced target service; the valid range is 1 to 65535.")
    weight: StrictInt = Field(description="The traffic is distributed proportionally to target weight, which is the ratio of the total weight of all targets. A target with higher weight receives a larger share of traffic. The valid range is from 0 to 256; the default value is '1'. Targets with a weight of '0' do not participate in load balancing but still accept persistent connections. We recommend using values in the middle range to leave room for later adjustments.")
    proxy_protocol: Optional[StrictStr] = Field(default='none', description="Proxy protocol version.", alias="proxyProtocol")
    health_check_enabled: Optional[StrictBool] = Field(default=None, description="When the health check is enabled, the target is available only when it accepts regular TCP or HTTP connection attempts for state checking. The state check consists of one connection attempt with the target's address and port. The default value is 'TRUE'.", alias="healthCheckEnabled")
    maintenance_enabled: Optional[StrictBool] = Field(default=None, description="When the maintenance mode is enabled, the target is prevented from receiving traffic; the default value is 'FALSE'.", alias="maintenanceEnabled")
    __properties: ClassVar[List[str]] = ["ip", "port", "weight", "proxyProtocol", "healthCheckEnabled", "maintenanceEnabled"]

    @field_validator('proxy_protocol')
    def proxy_protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['none', 'v1', 'v2', 'v2ssl']):
            raise ValueError("must be one of enum values ('none', 'v1', 'v2', 'v2ssl')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TargetGroupTarget from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TargetGroupTarget from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ip": obj.get("ip"),
            "port": obj.get("port"),
            "weight": obj.get("weight"),
            "proxyProtocol": obj.get("proxyProtocol") if obj.get("proxyProtocol") is not None else 'none',
            "healthCheckEnabled": obj.get("healthCheckEnabled"),
            "maintenanceEnabled": obj.get("maintenanceEnabled")
        })
        return _obj


