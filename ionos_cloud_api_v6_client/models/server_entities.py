# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from ionos_cloud_api_v6_client.models.attached_volumes import AttachedVolumes
from ionos_cloud_api_v6_client.models.cdroms import Cdroms
from typing import Optional, Set
from typing_extensions import Self

class ServerEntities(BaseModel):
    """
    ServerEntities
    """ # noqa: E501
    cdroms: Optional[Cdroms] = None
    volumes: Optional[AttachedVolumes] = None
    nics: Optional[Nics] = None
    securitygroups: Optional[SecurityGroups] = None
    __properties: ClassVar[List[str]] = ["cdroms", "volumes", "nics", "securitygroups"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerEntities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cdroms
        if self.cdroms:
            _dict['cdroms'] = self.cdroms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of volumes
        if self.volumes:
            _dict['volumes'] = self.volumes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nics
        if self.nics:
            _dict['nics'] = self.nics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of securitygroups
        if self.securitygroups:
            _dict['securitygroups'] = self.securitygroups.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerEntities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cdroms": Cdroms.from_dict(obj["cdroms"]) if obj.get("cdroms") is not None else None,
            "volumes": AttachedVolumes.from_dict(obj["volumes"]) if obj.get("volumes") is not None else None,
            "nics": Nics.from_dict(obj["nics"]) if obj.get("nics") is not None else None,
            "securitygroups": SecurityGroups.from_dict(obj["securitygroups"]) if obj.get("securitygroups") is not None else None
        })
        return _obj

from ionos_cloud_api_v6_client.models.nics import Nics
from ionos_cloud_api_v6_client.models.security_groups import SecurityGroups
# TODO: Rewrite to not use raise_errors
ServerEntities.model_rebuild(raise_errors=False)

