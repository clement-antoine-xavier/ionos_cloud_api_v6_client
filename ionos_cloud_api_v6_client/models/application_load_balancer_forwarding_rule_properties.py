# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ionos_cloud_api_v6_client.models.application_load_balancer_http_rule import ApplicationLoadBalancerHttpRule
from typing import Optional, Set
from typing_extensions import Self

class ApplicationLoadBalancerForwardingRuleProperties(BaseModel):
    """
    ApplicationLoadBalancerForwardingRuleProperties
    """ # noqa: E501
    name: StrictStr = Field(description="The name of the Application Load Balancer forwarding rule.")
    protocol: StrictStr = Field(description="The balancing protocol.")
    listener_ip: StrictStr = Field(description="The listening (inbound) IP.", alias="listenerIp")
    listener_port: StrictInt = Field(description="The listening (inbound) port number; the valid range is 1 to 65535.", alias="listenerPort")
    client_timeout: Optional[StrictInt] = Field(default=None, description="The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).", alias="clientTimeout")
    server_certificates: Optional[List[StrictStr]] = Field(default=None, description="Array of items in the collection.", alias="serverCertificates")
    http_rules: Optional[List[ApplicationLoadBalancerHttpRule]] = Field(default=None, description="An array of items in the collection. The original order of rules is preserved during processing, except that rules of the 'FORWARD' type are processed after the rules with other defined actions. The relative order of the 'FORWARD' type rules is also preserved during the processing.", alias="httpRules")
    __properties: ClassVar[List[str]] = ["name", "protocol", "listenerIp", "listenerPort", "clientTimeout", "serverCertificates", "httpRules"]

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['HTTP']):
            raise ValueError("must be one of enum values ('HTTP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationLoadBalancerForwardingRuleProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in http_rules (list)
        _items = []
        if self.http_rules:
            for _item_http_rules in self.http_rules:
                if _item_http_rules:
                    _items.append(_item_http_rules.to_dict())
            _dict['httpRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationLoadBalancerForwardingRuleProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "protocol": obj.get("protocol"),
            "listenerIp": obj.get("listenerIp"),
            "listenerPort": obj.get("listenerPort"),
            "clientTimeout": obj.get("clientTimeout"),
            "serverCertificates": obj.get("serverCertificates"),
            "httpRules": [ApplicationLoadBalancerHttpRule.from_dict(_item) for _item in obj["httpRules"]] if obj.get("httpRules") is not None else None
        })
        return _obj


