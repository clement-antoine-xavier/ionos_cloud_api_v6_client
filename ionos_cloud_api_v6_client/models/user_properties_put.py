# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UserPropertiesPut(BaseModel):
    """
    UserPropertiesPut
    """ # noqa: E501
    firstname: Optional[StrictStr] = Field(default=None, description="The first name of the user.")
    lastname: Optional[StrictStr] = Field(default=None, description="The last name of the user.")
    email: Optional[StrictStr] = Field(default=None, description="The email address of the user.")
    password: Optional[StrictStr] = Field(default=None, description="password of the user")
    administrator: Optional[StrictBool] = Field(default=None, description="Indicates if the user has admin rights.")
    force_sec_auth: Optional[StrictBool] = Field(default=None, description="Indicates if secure authentication should be forced on the user.", alias="forceSecAuth")
    sec_auth_active: Optional[StrictBool] = Field(default=None, description="Indicates if secure authentication is active for the user.", alias="secAuthActive")
    active: Optional[StrictBool] = Field(default=None, description="Indicates if the user is active.")
    __properties: ClassVar[List[str]] = ["firstname", "lastname", "email", "password", "administrator", "forceSecAuth", "secAuthActive", "active"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserPropertiesPut from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserPropertiesPut from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "firstname": obj.get("firstname"),
            "lastname": obj.get("lastname"),
            "email": obj.get("email"),
            "password": obj.get("password"),
            "administrator": obj.get("administrator"),
            "forceSecAuth": obj.get("forceSecAuth"),
            "secAuthActive": obj.get("secAuthActive"),
            "active": obj.get("active")
        })
        return _obj


