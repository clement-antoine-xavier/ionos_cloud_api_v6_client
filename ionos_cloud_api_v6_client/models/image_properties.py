# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ImageProperties(BaseModel):
    """
    ImageProperties
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The resource name.")
    description: Optional[StrictStr] = Field(default=None, description="Human-readable description.")
    location: Optional[StrictStr] = Field(default=None, description="The location of this image/snapshot.")
    size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The image size in GB.")
    cpu_hot_plug: Optional[StrictBool] = Field(default=None, description="Hot-plug capable CPU (no reboot required).", alias="cpuHotPlug")
    cpu_hot_unplug: Optional[StrictBool] = Field(default=None, description="Hot-unplug capable CPU (no reboot required).", alias="cpuHotUnplug")
    ram_hot_plug: Optional[StrictBool] = Field(default=None, description="Hot-plug capable RAM (no reboot required).", alias="ramHotPlug")
    ram_hot_unplug: Optional[StrictBool] = Field(default=None, description="Hot-unplug capable RAM (no reboot required).", alias="ramHotUnplug")
    nic_hot_plug: Optional[StrictBool] = Field(default=None, description="Hot-plug capable NIC (no reboot required).", alias="nicHotPlug")
    nic_hot_unplug: Optional[StrictBool] = Field(default=None, description="Hot-unplug capable NIC (no reboot required).", alias="nicHotUnplug")
    disc_virtio_hot_plug: Optional[StrictBool] = Field(default=None, description="Hot-plug capable Virt-IO drive (no reboot required).", alias="discVirtioHotPlug")
    disc_virtio_hot_unplug: Optional[StrictBool] = Field(default=None, description="Hot-unplug capable Virt-IO drive (no reboot required). Not supported with Windows VMs.", alias="discVirtioHotUnplug")
    disc_scsi_hot_plug: Optional[StrictBool] = Field(default=None, description="Hot-plug capable SCSI drive (no reboot required).", alias="discScsiHotPlug")
    disc_scsi_hot_unplug: Optional[StrictBool] = Field(default=None, description="Hot-unplug capable SCSI drive (no reboot required). Not supported with Windows VMs.", alias="discScsiHotUnplug")
    expose_serial: Optional[StrictBool] = Field(default=False, description="If set to `true` will expose the serial id of the disk attached to the server. If set to `false` will not expose the serial id. Some operating systems or software solutions require the serial id to be exposed to work properly. Exposing the serial  can influence licensed software (e.g. Windows) behavior", alias="exposeSerial")
    require_legacy_bios: Optional[StrictBool] = Field(default=True, description="Indicates if the image requires the legacy BIOS for compatibility or specific needs.", alias="requireLegacyBios")
    licence_type: StrictStr = Field(description="The OS type of this image.", alias="licenceType")
    application_type: Optional[StrictStr] = Field(default='UNKNOWN', description="The type of application that is hosted on this resource.  Only public images can have an Application type different than UNKNOWN.", alias="applicationType")
    image_type: Optional[StrictStr] = Field(default=None, description="The image type.", alias="imageType")
    public: Optional[StrictBool] = Field(default=None, description="Indicates whether the image is part of a public repository.")
    image_aliases: Optional[List[StrictStr]] = Field(default=None, description="List of image aliases mapped for this image", alias="imageAliases")
    cloud_init: Optional[StrictStr] = Field(default=None, description="Cloud init compatibility.", alias="cloudInit")
    __properties: ClassVar[List[str]] = ["name", "description", "location", "size", "cpuHotPlug", "cpuHotUnplug", "ramHotPlug", "ramHotUnplug", "nicHotPlug", "nicHotUnplug", "discVirtioHotPlug", "discVirtioHotUnplug", "discScsiHotPlug", "discScsiHotUnplug", "exposeSerial", "requireLegacyBios", "licenceType", "applicationType", "imageType", "public", "imageAliases", "cloudInit"]

    @field_validator('image_type')
    def image_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HDD', 'CDROM', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('HDD', 'CDROM', 'UNKNOWN')")
        return value

    @field_validator('cloud_init')
    def cloud_init_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'V1']):
            raise ValueError("must be one of enum values ('NONE', 'V1')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "location",
            "size",
            "image_type",
            "public",
            "image_aliases",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "location": obj.get("location"),
            "size": obj.get("size"),
            "cpuHotPlug": obj.get("cpuHotPlug"),
            "cpuHotUnplug": obj.get("cpuHotUnplug"),
            "ramHotPlug": obj.get("ramHotPlug"),
            "ramHotUnplug": obj.get("ramHotUnplug"),
            "nicHotPlug": obj.get("nicHotPlug"),
            "nicHotUnplug": obj.get("nicHotUnplug"),
            "discVirtioHotPlug": obj.get("discVirtioHotPlug"),
            "discVirtioHotUnplug": obj.get("discVirtioHotUnplug"),
            "discScsiHotPlug": obj.get("discScsiHotPlug"),
            "discScsiHotUnplug": obj.get("discScsiHotUnplug"),
            "exposeSerial": obj.get("exposeSerial") if obj.get("exposeSerial") is not None else False,
            "requireLegacyBios": obj.get("requireLegacyBios") if obj.get("requireLegacyBios") is not None else True,
            "licenceType": obj.get("licenceType"),
            "applicationType": obj.get("applicationType") if obj.get("applicationType") is not None else 'UNKNOWN',
            "imageType": obj.get("imageType"),
            "public": obj.get("public"),
            "imageAliases": obj.get("imageAliases"),
            "cloudInit": obj.get("cloudInit")
        })
        return _obj


