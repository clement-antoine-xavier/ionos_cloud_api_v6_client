# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ionos_cloud_api_v6_client.models.ip_failover import IPFailover
from typing import Optional, Set
from typing_extensions import Self

class LanProperties(BaseModel):
    """
    LanProperties
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the  resource.")
    ip_failover: Optional[List[IPFailover]] = Field(default=None, description="IP failover configurations for lan", alias="ipFailover")
    ipv4_cidr_block: Optional[StrictStr] = Field(default=None, description="For public LANs this property is null, for private LANs it contains the private IPv4 CIDR range. This property is a read only property.", alias="ipv4CidrBlock")
    ipv6_cidr_block: Optional[StrictStr] = Field(default=None, description="For a GET request, this value is either 'null' or contains the LAN's /64 IPv6 CIDR block if this LAN is IPv6 enabled. For POST/PUT/PATCH requests, 'AUTO' will result in enabling this LAN for IPv6 and automatically assign a /64 IPv6 CIDR block to this LAN and /80 IPv6 CIDR blocks to the NICs and one /128 IPv6 address to each connected NIC. If you choose the IPv6 CIDR block for the LAN on your own, then you must provide a /64 block, which is inside the IPv6 CIDR block of the virtual datacenter and unique inside all LANs from this virtual datacenter. If you enable IPv6 on a LAN with NICs, those NICs will get a /80 IPv6 CIDR block and one IPv6 address assigned to each automatically, unless you specify them explicitly on the LAN and on the NICs. A virtual data center is limited to a maximum of 256 IPv6-enabled LANs.", alias="ipv6CidrBlock")
    pcc: Optional[StrictStr] = Field(default=None, description="The unique identifier of the Cross Connect the LAN is connected to, if any. It needs to be ensured that IP addresses of the NICs of all LANs connected to a given Cross Connect is not duplicated and belongs to the same subnet range.")
    public: Optional[StrictBool] = Field(default=None, description="Indicates if the LAN is connected to the internet or not.")
    vni: Optional[StrictInt] = Field(default=None, description="The VNI value that is assigned to the LAN.")
    __properties: ClassVar[List[str]] = ["name", "ipFailover", "ipv4CidrBlock", "ipv6CidrBlock", "pcc", "public", "vni"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LanProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "ipv4_cidr_block",
            "vni",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ip_failover (list)
        _items = []
        if self.ip_failover:
            for _item_ip_failover in self.ip_failover:
                if _item_ip_failover:
                    _items.append(_item_ip_failover.to_dict())
            _dict['ipFailover'] = _items
        # set to None if ipv4_cidr_block (nullable) is None
        # and model_fields_set contains the field
        if self.ipv4_cidr_block is None and "ipv4_cidr_block" in self.model_fields_set:
            _dict['ipv4CidrBlock'] = None

        # set to None if ipv6_cidr_block (nullable) is None
        # and model_fields_set contains the field
        if self.ipv6_cidr_block is None and "ipv6_cidr_block" in self.model_fields_set:
            _dict['ipv6CidrBlock'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LanProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "ipFailover": [IPFailover.from_dict(_item) for _item in obj["ipFailover"]] if obj.get("ipFailover") is not None else None,
            "ipv4CidrBlock": obj.get("ipv4CidrBlock"),
            "ipv6CidrBlock": obj.get("ipv6CidrBlock"),
            "pcc": obj.get("pcc"),
            "public": obj.get("public"),
            "vni": obj.get("vni")
        })
        return _obj


