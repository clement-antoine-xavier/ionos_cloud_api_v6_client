# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ionos_cloud_api_v6_client.models.kubernetes_maintenance_window import KubernetesMaintenanceWindow
from ionos_cloud_api_v6_client.models.s3_bucket import S3Bucket
from typing import Optional, Set
from typing_extensions import Self

class KubernetesClusterProperties(BaseModel):
    """
    KubernetesClusterProperties
    """ # noqa: E501
    name: StrictStr = Field(description="A Kubernetes cluster name. Valid Kubernetes cluster name must be 63 characters or less and must be empty or begin and end with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.")
    k8s_version: Optional[StrictStr] = Field(default=None, description="The Kubernetes version the cluster is running. This imposes restrictions on what Kubernetes versions can be run in a cluster's nodepools. Additionally, not all Kubernetes versions are viable upgrade targets for all prior versions.", alias="k8sVersion")
    maintenance_window: Optional[KubernetesMaintenanceWindow] = Field(default=None, alias="maintenanceWindow")
    available_upgrade_versions: Optional[List[StrictStr]] = Field(default=None, description="List of available versions for upgrading the cluster", alias="availableUpgradeVersions")
    viable_node_pool_versions: Optional[List[StrictStr]] = Field(default=None, description="List of versions that may be used for node pools under this cluster", alias="viableNodePoolVersions")
    public: Optional[StrictBool] = Field(default=True, description="The indicator if the cluster is public or private. Be aware that setting it to false is currently in beta phase.")
    location: Optional[StrictStr] = Field(default=None, description="The location of the cluster if the cluster is private. This property is immutable. The location must be enabled for your contract or you must have a Datacenter within that location. This attribute is mandatory if the cluster is private.")
    nat_gateway_ip: Optional[StrictStr] = Field(default=None, description="The nat gateway IP of the cluster if the cluster is private. This property is immutable. Must be a reserved IP in the same location as the cluster's location. This attribute is mandatory if the cluster is private.", alias="natGatewayIp")
    node_subnet: Optional[StrictStr] = Field(default=None, description="The node subnet of the cluster, if the cluster is private. This property is optional and immutable. Must be a valid CIDR notation for an IPv4 network prefix of 16 bits length.", alias="nodeSubnet")
    api_subnet_allow_list: Optional[List[StrictStr]] = Field(default=None, description="Access to the K8s API server is restricted to these CIDRs. Traffic, internal to the cluster, is not affected by this restriction. If no allowlist is specified, access is not restricted. If an IP without subnet mask is provided, the default value is used: 32 for IPv4 and 128 for IPv6.", alias="apiSubnetAllowList")
    s3_buckets: Optional[List[S3Bucket]] = Field(default=None, description="List of Object storage buckets configured for K8s usage. For now it contains only one bucket used to store K8s API audit logs", alias="s3Buckets")
    __properties: ClassVar[List[str]] = ["name", "k8sVersion", "maintenanceWindow", "availableUpgradeVersions", "viableNodePoolVersions", "public", "location", "natGatewayIp", "nodeSubnet", "apiSubnetAllowList", "s3Buckets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KubernetesClusterProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of maintenance_window
        if self.maintenance_window:
            _dict['maintenanceWindow'] = self.maintenance_window.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in s3_buckets (list)
        _items = []
        if self.s3_buckets:
            for _item_s3_buckets in self.s3_buckets:
                if _item_s3_buckets:
                    _items.append(_item_s3_buckets.to_dict())
            _dict['s3Buckets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KubernetesClusterProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "k8sVersion": obj.get("k8sVersion"),
            "maintenanceWindow": KubernetesMaintenanceWindow.from_dict(obj["maintenanceWindow"]) if obj.get("maintenanceWindow") is not None else None,
            "availableUpgradeVersions": obj.get("availableUpgradeVersions"),
            "viableNodePoolVersions": obj.get("viableNodePoolVersions"),
            "public": obj.get("public") if obj.get("public") is not None else True,
            "location": obj.get("location"),
            "natGatewayIp": obj.get("natGatewayIp"),
            "nodeSubnet": obj.get("nodeSubnet"),
            "apiSubnetAllowList": obj.get("apiSubnetAllowList"),
            "s3Buckets": [S3Bucket.from_dict(_item) for _item in obj["s3Buckets"]] if obj.get("s3Buckets") is not None else None
        })
        return _obj


