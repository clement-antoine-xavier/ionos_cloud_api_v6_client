# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GroupProperties(BaseModel):
    """
    GroupProperties
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the resource.")
    create_datacenter: Optional[StrictBool] = Field(default=None, description="Create data center privilege.", alias="createDatacenter")
    create_snapshot: Optional[StrictBool] = Field(default=None, description="Create snapshot privilege.", alias="createSnapshot")
    reserve_ip: Optional[StrictBool] = Field(default=None, description="Reserve IP block privilege.", alias="reserveIp")
    access_activity_log: Optional[StrictBool] = Field(default=None, description="Activity log access privilege.", alias="accessActivityLog")
    create_pcc: Optional[StrictBool] = Field(default=None, description="User privilege to create a cross connect.", alias="createPcc")
    s3_privilege: Optional[StrictBool] = Field(default=None, description="S3 privilege.", alias="s3Privilege")
    create_backup_unit: Optional[StrictBool] = Field(default=None, description="Create backup unit privilege.", alias="createBackupUnit")
    create_internet_access: Optional[StrictBool] = Field(default=None, description="Create internet access privilege.", alias="createInternetAccess")
    create_k8s_cluster: Optional[StrictBool] = Field(default=None, description="Create Kubernetes cluster privilege.", alias="createK8sCluster")
    create_flow_log: Optional[StrictBool] = Field(default=None, description="Create Flow Logs privilege.", alias="createFlowLog")
    access_and_manage_monitoring: Optional[StrictBool] = Field(default=None, description="Privilege for a group to access and manage monitoring related functionality (access metrics, CRUD on alarms, alarm-actions etc) using Monotoring-as-a-Service (MaaS).", alias="accessAndManageMonitoring")
    access_and_manage_certificates: Optional[StrictBool] = Field(default=None, description="Privilege for a group to access and manage certificates.", alias="accessAndManageCertificates")
    manage_d_baa_s: Optional[StrictBool] = Field(default=None, description="Privilege for a group to manage DBaaS related functionality.", alias="manageDBaaS")
    access_and_manage_dns: Optional[StrictBool] = Field(default=None, description="Privilege for a group to access and manage dns records.", alias="accessAndManageDns")
    manage_registry: Optional[StrictBool] = Field(default=None, description="Privilege for group accessing container registry related functionality.", alias="manageRegistry")
    manage_dataplatform: Optional[StrictBool] = Field(default=None, description="Privilege for a group to access and manage the Data Platform.", alias="manageDataplatform")
    access_and_manage_logging: Optional[StrictBool] = Field(default=None, description="Privilege for a group to access and manage Logs.", alias="accessAndManageLogging")
    access_and_manage_cdn: Optional[StrictBool] = Field(default=None, description="Privilege for a group to access and manage CDN.", alias="accessAndManageCdn")
    access_and_manage_vpn: Optional[StrictBool] = Field(default=None, description="Privilege for a group to access and manage VPN.", alias="accessAndManageVpn")
    access_and_manage_api_gateway: Optional[StrictBool] = Field(default=None, description="Privilege for a group to access and manage API Gateway.", alias="accessAndManageApiGateway")
    access_and_manage_kaas: Optional[StrictBool] = Field(default=None, description="Privilege for a group to access and manage KaaS.", alias="accessAndManageKaas")
    access_and_manage_network_file_storage: Optional[StrictBool] = Field(default=None, description="Privilege for a group to access and manage Network File Storage.", alias="accessAndManageNetworkFileStorage")
    access_and_manage_ai_model_hub: Optional[StrictBool] = Field(default=None, description="Privilege for a group to access and manage AI Model Hub.", alias="accessAndManageAiModelHub")
    access_and_manage_iam_resources: Optional[StrictBool] = Field(default=None, description="Privilege for a group to access and manage Password Policies.", alias="accessAndManageIamResources")
    create_network_security_groups: Optional[StrictBool] = Field(default=None, description="Privilege for a group to access and manage Network Security Groups.", alias="createNetworkSecurityGroups")
    __properties: ClassVar[List[str]] = ["name", "createDatacenter", "createSnapshot", "reserveIp", "accessActivityLog", "createPcc", "s3Privilege", "createBackupUnit", "createInternetAccess", "createK8sCluster", "createFlowLog", "accessAndManageMonitoring", "accessAndManageCertificates", "manageDBaaS", "accessAndManageDns", "manageRegistry", "manageDataplatform", "accessAndManageLogging", "accessAndManageCdn", "accessAndManageVpn", "accessAndManageApiGateway", "accessAndManageKaas", "accessAndManageNetworkFileStorage", "accessAndManageAiModelHub", "accessAndManageIamResources", "createNetworkSecurityGroups"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GroupProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GroupProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "createDatacenter": obj.get("createDatacenter"),
            "createSnapshot": obj.get("createSnapshot"),
            "reserveIp": obj.get("reserveIp"),
            "accessActivityLog": obj.get("accessActivityLog"),
            "createPcc": obj.get("createPcc"),
            "s3Privilege": obj.get("s3Privilege"),
            "createBackupUnit": obj.get("createBackupUnit"),
            "createInternetAccess": obj.get("createInternetAccess"),
            "createK8sCluster": obj.get("createK8sCluster"),
            "createFlowLog": obj.get("createFlowLog"),
            "accessAndManageMonitoring": obj.get("accessAndManageMonitoring"),
            "accessAndManageCertificates": obj.get("accessAndManageCertificates"),
            "manageDBaaS": obj.get("manageDBaaS"),
            "accessAndManageDns": obj.get("accessAndManageDns"),
            "manageRegistry": obj.get("manageRegistry"),
            "manageDataplatform": obj.get("manageDataplatform"),
            "accessAndManageLogging": obj.get("accessAndManageLogging"),
            "accessAndManageCdn": obj.get("accessAndManageCdn"),
            "accessAndManageVpn": obj.get("accessAndManageVpn"),
            "accessAndManageApiGateway": obj.get("accessAndManageApiGateway"),
            "accessAndManageKaas": obj.get("accessAndManageKaas"),
            "accessAndManageNetworkFileStorage": obj.get("accessAndManageNetworkFileStorage"),
            "accessAndManageAiModelHub": obj.get("accessAndManageAiModelHub"),
            "accessAndManageIamResources": obj.get("accessAndManageIamResources"),
            "createNetworkSecurityGroups": obj.get("createNetworkSecurityGroups")
        })
        return _obj


