# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NicProperties(BaseModel):
    """
    NicProperties
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the  resource.")
    mac: Optional[StrictStr] = Field(default=None, description="The MAC address of the NIC.")
    ips: Optional[List[StrictStr]] = Field(default=None, description="Collection of IP addresses, assigned to the NIC. Explicitly assigned public IPs need to come from reserved IP blocks. Passing value null or empty array will assign an IP address automatically.")
    dhcp: Optional[StrictBool] = Field(default=True, description="Indicates if the NIC will reserve an IP using DHCP.")
    ipv6_ips: Optional[List[StrictStr]] = Field(default=None, description="If this NIC is connected to an IPv6 enabled LAN then this property contains the IPv6 IP addresses of the NIC. The maximum number of IPv6 IP addresses per NIC is 50, if you need more, contact support. If you leave this property 'null' when adding a NIC, when changing the NIC's IPv6 CIDR block, when changing the LAN's IPv6 CIDR block or when moving the NIC to a different IPv6 enabled LAN, then we will automatically assign the same number of IPv6 addresses which you had before from the NICs new CIDR block. If you leave this property 'null' while not changing the CIDR block, the IPv6 IP addresses won't be changed either. You can also provide your own self choosen IPv6 addresses, which then must be inside the IPv6 CIDR block of this NIC.", alias="ipv6Ips")
    ipv6_cidr_block: Optional[StrictStr] = Field(default=None, description="If this NIC is connected to an IPv6 enabled LAN then this property contains the /80 IPv6 CIDR block of the NIC. If you leave this property 'null' when adding a NIC to an IPv6-enabled LAN, then an IPv6 CIDR block will automatically be assigned to the NIC, but you can also specify an /80 IPv6 CIDR block for the NIC on your own, which must be inside the /64 IPv6 CIDR block of the LAN and unique. This value can only be set, if the LAN already has an IPv6 CIDR block assigned. An IPv6-enabled LAN is limited to a maximum of 65,536 NICs.", alias="ipv6CidrBlock")
    dhcpv6: Optional[StrictBool] = Field(default=True, description="Indicates if the NIC will receive an IPv6 using DHCP. It can be set to 'true' or 'false' only if this NIC is connected to an IPv6 enabled LAN.")
    lan: StrictInt = Field(description="The LAN ID the NIC will be on. If the LAN ID does not exist, it will be implicitly created.")
    firewall_active: Optional[StrictBool] = Field(default=None, description="Activate or deactivate the firewall. By default, an active firewall without any defined rules will block all incoming network traffic except for the firewall rules that explicitly allows certain protocols, IP addresses and ports.", alias="firewallActive")
    firewall_type: Optional[StrictStr] = Field(default=None, description="The type of firewall rules that will be allowed on the NIC. If not specified, the default INGRESS value is used.", alias="firewallType")
    device_number: Optional[StrictInt] = Field(default=None, description="The Logical Unit Number (LUN) of the storage volume. Null if this NIC was created using Cloud API and no DCD changes were performed on the Datacenter.", alias="deviceNumber")
    pci_slot: Optional[StrictInt] = Field(default=None, description="The PCI slot number for the NIC.", alias="pciSlot")
    vnet: Optional[StrictStr] = Field(default=None, description="The vnet ID that belongs to this NIC; Requires system privileges, for internal usage only")
    __properties: ClassVar[List[str]] = ["name", "mac", "ips", "dhcp", "ipv6Ips", "ipv6CidrBlock", "dhcpv6", "lan", "firewallActive", "firewallType", "deviceNumber", "pciSlot", "vnet"]

    @field_validator('firewall_type')
    def firewall_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INGRESS', 'EGRESS', 'BIDIRECTIONAL']):
            raise ValueError("must be one of enum values ('INGRESS', 'EGRESS', 'BIDIRECTIONAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NicProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "device_number",
            "pci_slot",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if ips (nullable) is None
        # and model_fields_set contains the field
        if self.ips is None and "ips" in self.model_fields_set:
            _dict['ips'] = None

        # set to None if ipv6_ips (nullable) is None
        # and model_fields_set contains the field
        if self.ipv6_ips is None and "ipv6_ips" in self.model_fields_set:
            _dict['ipv6Ips'] = None

        # set to None if ipv6_cidr_block (nullable) is None
        # and model_fields_set contains the field
        if self.ipv6_cidr_block is None and "ipv6_cidr_block" in self.model_fields_set:
            _dict['ipv6CidrBlock'] = None

        # set to None if dhcpv6 (nullable) is None
        # and model_fields_set contains the field
        if self.dhcpv6 is None and "dhcpv6" in self.model_fields_set:
            _dict['dhcpv6'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NicProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "mac": obj.get("mac"),
            "ips": obj.get("ips"),
            "dhcp": obj.get("dhcp") if obj.get("dhcp") is not None else True,
            "ipv6Ips": obj.get("ipv6Ips"),
            "ipv6CidrBlock": obj.get("ipv6CidrBlock"),
            "dhcpv6": obj.get("dhcpv6") if obj.get("dhcpv6") is not None else True,
            "lan": obj.get("lan"),
            "firewallActive": obj.get("firewallActive"),
            "firewallType": obj.get("firewallType"),
            "deviceNumber": obj.get("deviceNumber"),
            "pciSlot": obj.get("pciSlot"),
            "vnet": obj.get("vnet")
        })
        return _obj


