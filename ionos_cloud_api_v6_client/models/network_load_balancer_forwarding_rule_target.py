# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ionos_cloud_api_v6_client.models.network_load_balancer_forwarding_rule_target_health_check import NetworkLoadBalancerForwardingRuleTargetHealthCheck
from typing import Optional, Set
from typing_extensions import Self

class NetworkLoadBalancerForwardingRuleTarget(BaseModel):
    """
    NetworkLoadBalancerForwardingRuleTarget
    """ # noqa: E501
    ip: StrictStr = Field(description="The IP of the balanced target VM.")
    port: StrictInt = Field(description="The port of the balanced target service; valid range is 1 to 65535.")
    weight: StrictInt = Field(description="Traffic is distributed in proportion to target weight, relative to the combined weight of all targets. A target with higher weight receives a greater share of traffic. Valid range is 0 to 256 and default is 1. Targets with weight of 0 do not participate in load balancing but still accept persistent connections. It is best to assign weights in the middle of the range to leave room for later adjustments.")
    proxy_protocol: Optional[StrictStr] = Field(default='none', description="Proxy protocol version.", alias="proxyProtocol")
    health_check: Optional[NetworkLoadBalancerForwardingRuleTargetHealthCheck] = Field(default=None, alias="healthCheck")
    __properties: ClassVar[List[str]] = ["ip", "port", "weight", "proxyProtocol", "healthCheck"]

    @field_validator('proxy_protocol')
    def proxy_protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['none', 'v1', 'v2', 'v2ssl']):
            raise ValueError("must be one of enum values ('none', 'v1', 'v2', 'v2ssl')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkLoadBalancerForwardingRuleTarget from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of health_check
        if self.health_check:
            _dict['healthCheck'] = self.health_check.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkLoadBalancerForwardingRuleTarget from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ip": obj.get("ip"),
            "port": obj.get("port"),
            "weight": obj.get("weight"),
            "proxyProtocol": obj.get("proxyProtocol") if obj.get("proxyProtocol") is not None else 'none',
            "healthCheck": NetworkLoadBalancerForwardingRuleTargetHealthCheck.from_dict(obj["healthCheck"]) if obj.get("healthCheck") is not None else None
        })
        return _obj


