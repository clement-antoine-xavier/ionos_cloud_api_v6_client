# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApplicationLoadBalancerProperties(BaseModel):
    """
    ApplicationLoadBalancerProperties
    """ # noqa: E501
    name: StrictStr = Field(description="The Application Load Balancer name.")
    listener_lan: StrictInt = Field(description="The ID of the listening (inbound) LAN.", alias="listenerLan")
    ips: Optional[List[StrictStr]] = Field(default=None, description="Collection of the Application Load Balancer IP addresses. (Inbound and outbound) IPs of the 'listenerLan' are customer-reserved public IPs for the public load balancers, and private IPs for the private load balancers.")
    target_lan: StrictInt = Field(description="The ID of the balanced private target LAN (outbound).", alias="targetLan")
    lb_private_ips: Optional[List[StrictStr]] = Field(default=None, description="Collection of private IP addresses with the subnet mask of the Application Load Balancer. IPs must contain valid a subnet mask. If no IP is provided, the system will generate an IP with /24 subnet.", alias="lbPrivateIps")
    central_logging: Optional[StrictBool] = Field(default=None, description="Turn logging on and off for this product. Default value is 'false'.", alias="centralLogging")
    logging_format: Optional[StrictStr] = Field(default=None, description="Specifies the format of the logs.", alias="loggingFormat")
    __properties: ClassVar[List[str]] = ["name", "listenerLan", "ips", "targetLan", "lbPrivateIps", "centralLogging", "loggingFormat"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationLoadBalancerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationLoadBalancerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "listenerLan": obj.get("listenerLan"),
            "ips": obj.get("ips"),
            "targetLan": obj.get("targetLan"),
            "lbPrivateIps": obj.get("lbPrivateIps"),
            "centralLogging": obj.get("centralLogging"),
            "loggingFormat": obj.get("loggingFormat")
        })
        return _obj


